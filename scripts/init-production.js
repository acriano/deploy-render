const path = require('path');
const { fileURLToPath } = require('url');
const { drizzle } = require('drizzle-orm/postgres-js');
const postgres = require('@neondatabase/serverless');
const { migrate } = require('drizzle-orm/postgres-js/migrator');
const { testConnection } = require('../server/config/database');

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function initProduction() {
  console.log('üöÄ Iniciando configura√ß√£o de produ√ß√£o...');

  try {
    // Testar conex√£o com o banco
    console.log('üì° Testando conex√£o com o banco de dados...');
    const isConnected = await testConnection();
    
    if (!isConnected) {
      console.error('‚ùå Falha na conex√£o com o banco de dados');
      process.exit(1);
    }

    console.log('‚úÖ Conex√£o com banco de dados estabelecida');

    // Configurar cliente PostgreSQL
    const connectionString = `postgresql://${process.env.POSTGRES_USER}:${process.env.POSTGRES_PASSWORD}@${process.env.POSTGRES_HOST}:${process.env.POSTGRES_PORT}/${process.env.POSTGRES_DB}`;
    
    const client = postgres(connectionString, { max: 1 });
    const db = drizzle(client);

    // Executar migra√ß√µes
    console.log('üîÑ Executando migra√ß√µes...');
    const migrationsPath = path.join(__dirname, '..', 'drizzle');
    
    await migrate(db, { migrationsFolder: migrationsPath });
    console.log('‚úÖ Migra√ß√µes executadas com sucesso');

    // Fechar conex√£o
    await client.end();
    
    console.log('üéâ Configura√ß√£o de produ√ß√£o conclu√≠da!');
    
  } catch (error) {
    console.error('‚ùå Erro durante a configura√ß√£o:', error);
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  initProduction();
}

module.exports = initProduction; 